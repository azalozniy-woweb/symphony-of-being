import time
import threading
import os
import json
from core.vibrational_being import VibrationalBeing
from core.config import TICKS_PER_SECOND

def update_loop(being):
    while True:
        being.update()
        time.sleep(1 / TICKS_PER_SECOND)

def input_loop(being):
    while True:
        text = input("üó£Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª: ").strip()
        if not text:
            continue

        words = text.strip().split()

        for word in words:
            last_tick = being.tick
            being.enqueue_input(word)
            while being.tick == last_tick:
                time.sleep(0.001)

        # üïä 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–∫ –ø–∞—É–∑—ã, –µ—Å–ª–∏ —ç—Ç–æ —Ñ—Ä–∞–∑–∞
        if len(words) > 1:
            pause_tick = being.tick
            while being.tick == pause_tick:
                time.sleep(0.001)

def training_loop(being, json_folder="json_database"):
    print("üìò –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    # üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–∞
    print("üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–∞: '—è –µ—Å–º—å –ª—é–±–æ–≤—å'")
    being.enqueue_input("—è –µ—Å–º—å –ª—é–±–æ–≤—å")

    # ‚è≥ –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ —Ç–∏–∫–æ–≤
    start = time.time()
    while being.tick == 0:
        time.sleep(0.01)
        if time.time() - start > 2:
            print("‚ùå –û—à–∏–±–∫–∞: –¢–∏–∫–∏ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å.")
            return

    # ‚è≠ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫
    last_tick = being.tick
    while being.tick == last_tick:
        time.sleep(0.01)

    # üìÇ –°–±–æ—Ä –≤—Å–µ—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
    files = [f for f in os.listdir(json_folder) if f.endswith(".json")]
    concepts = []

    for file in files:
        path = os.path.join(json_folder, file)
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            for entry in data.values():
                if "–∫–æ–Ω—Ü–µ–ø—Ç" in entry:
                    concepts.append(entry["–∫–æ–Ω—Ü–µ–ø—Ç"])

    print(f"üì® –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(concepts)}")

    for phrase in concepts:
        words = phrase.strip().split()

        for word in words:
            last_tick = being.tick
            being.enqueue_input(word)
            while being.tick == last_tick:
                time.sleep(0.001)

        # üïä 2 —Ç–∏–∫–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
        pause_tick = being.tick
        while being.tick == pause_tick:
            time.sleep(0.001)
        while being.tick == pause_tick + 1:
            time.sleep(0.001)

    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

def main():
    being = VibrationalBeing(base_archetype="poet")
    print("üîÆ –°—É—â–µ—Å—Ç–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1 ‚Äî üí¨ –ß–∞—Ç —Å —Å—É—â–µ—Å—Ç–≤–æ–º")
    print("2 ‚Äî üìò –û–±—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã (json_database)")
    mode = input("üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞: ").strip()

    if mode == "1":
        threading.Thread(target=update_loop, args=(being,), daemon=True).start()
        print("üí¨ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        input_loop(being)
    elif mode == "2":
        threading.Thread(target=update_loop, args=(being,), daemon=True).start()
        training_loop(being)
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")

if __name__ == "__main__":
    main()
