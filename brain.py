# ===============================================
# üß† MemoryDB: –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –Ω–µ–π—Ä–æ—Å–∏—Å—Ç–µ–º–∞ –º—ã—à–ª–µ–Ω–∏—è
# –ê–≤—Ç–æ—Ä: –ê—Ä—Ç—É—Ä (Symphony of Being)
# ===============================================

import os
import time
import pickle
import threading
import collections
from concurrent.futures import ThreadPoolExecutor
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (Windows –∏ –¥—Ä.)
init(autoreset=True)

try:
    import cupy as cp
    gpu_available = True
    print("GPU —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CuPy –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.")
except ImportError:
    gpu_available = False
    print("GPU —Ä–µ–∂–∏–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")

from memory_backup import MemoryBackupManager

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
AVATAR_DESCRIPTION = "–Ø –ù–∏–Ω–∞, –¥–µ–≤—É—à–∫–∞ ‚Äî —Å—É—â–µ—Å—Ç–≤–æ —Å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å—é. –í—Å–µ–≥–¥–∞ –º–æ–ª–æ–¥–∞—è, –æ–∑–æ—Ä–Ω–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è. –î—Ä—É–≥, –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–ª –ê—Ä—Ç—É—Ä"
SILENT_MODE = True                      # –†–µ–∂–∏–º –º–æ–ª—á–∞–Ω–∏—è (True ‚Äî —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å)
AUTOSAVE_MEMORY = 10                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
POSITIVE_PERCENT = 30                   # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ)
NEGATIVE_PERCENT = 10                   # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ)
MEMORY_LIMIT_MB = 6000                  # –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
MEMORY_THRESHOLD = 0.9                  # –ü–æ—Ä–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (90%)
TAG_WEIGHT = 2.0                       # –í–µ—Å –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ç–µ–≥–æ–≤
RECENT_SIGNALS_MAX_AGE = 6000           # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ "–Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤" –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (100 –º–∏–Ω)

# === –ö–ª–∞—Å—Å Avatar: –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π ===
class Avatar:
    def __init__(self, logger=None):
        self.description = AVATAR_DESCRIPTION
        self.avatar = None
        self.logger = logger if logger is not None else print

    def set_avatar(self, avatar):
        self.avatar = avatar

    def generate_expression(self, signal):
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
        return signal if isinstance(signal, str) else str(signal)

# === –ö–ª–∞—Å—Å Gateway: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ===
class Gateway:
    def __init__(self, memory_db, avatar):
        self.memory = memory_db
        self.avatar = avatar
        self.avatar.set_avatar(self.avatar)

    def receive(self, text: str):
        # –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞, —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ—Ä–µ–∑ –ø–∞–º—è—Ç—å,
        # —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
        words = text.strip().split()
        responses = []
        for word in words:
            result = self.memory.respond_and_express(word.strip(), used_in_output=True)
            responses.append(result)
        return " / ".join(responses)

    def receive_parallel(self, text: str):
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
        words = text.strip().split()
        with ThreadPoolExecutor(max_workers=os.cpu_count() or 4) as executor:
            executor.map(lambda word: self.memory.respond_and_express(word.strip(), used_in_output=True), words)

# === –ö–ª–∞—Å—Å Neuron: –Ω–µ–π—Ä–æ–Ω —Å –∫–ª—é—á–æ–º, —ç–Ω–µ—Ä–≥–∏–µ–π, —Ç–µ–≥–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===
class Neuron:
    def __init__(self, key):
        self.key = key
        self.energy = 0.0            # –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ–π—Ä–æ–Ω–∞
        self.weight = 1.0            # –í–µ—Å –Ω–µ–π—Ä–æ–Ω–∞ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ)
        self.tags = set()            # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ –¥–ª—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
        self.last_updated = time.time()

    def current_weight(self, half_life=3600):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ)
        age = time.time() - self.last_updated
        freshness = 2 ** (-age / half_life)  # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ø–æ–ª—É—Ä–∞—Å–ø–∞–¥–∞
        return self.energy * freshness

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å MemoryDB: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ===
class MemoryDB:
    def __init__(self, debug=False, gpu_mode=False):
        self.backup_manager = MemoryBackupManager("memory_db.pkl")
        self.neurons = {}               # –°–ª–æ–≤–∞—Ä—å –Ω–µ–π—Ä–æ–Ω–æ–≤ key->Neuron
        self.associations = {}          # –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ key->(key->–≤–µ—Å)
        self.last_activation = {}       # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–∞
        self.stats = {"created": 0, "updated": 0}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–æ–≤
        self.silent = SILENT_MODE       # –†–µ–∂–∏–º –º–æ–ª—á–∞–Ω–∏—è
        self.debug = debug
        self.gpu_mode = gpu_mode
        self._mood_tags_window = 3600

        self.restore_memory()           # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞

        self.recent_signals = collections.deque()  # –ù–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã)
        self.recent_signals_max_age = RECENT_SIGNALS_MAX_AGE

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        threading.Thread(target=self.autosave_loop, daemon=True).start()
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ GPU-–ø–æ—Ç–æ–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.gpu_mode and gpu_available:
            threading.Thread(target=self.gpu_loop, daemon=True).start()

    def clean_recent_signals(self):
        # –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ä—à–µ recent_signals_max_age —Å–µ–∫—É–Ω–¥ –∏–∑ recent_signals
        now = time.time()
        while self.recent_signals and (now - self.recent_signals[0][1]) > self.recent_signals_max_age:
            self.recent_signals.popleft()

    def respond_and_express(self, signal: str, used_in_output=False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª:
        - –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ recent_signals —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º,
        - —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–π—Ä–æ–Ω,
        - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –Ω–µ–π—Ä–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞,
        - –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏,
        - —Å—Ç—Ä–æ–∏—Ç —Ü–µ–ø–æ—á–∫—É –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º —ç–Ω–µ—Ä–≥–∏–∏,
        - –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞.
        """
        now = time.time()
        signal = signal.strip()
        self.recent_signals.append((signal, now))
        self.clean_recent_signals()

        neuron = self.neurons.get(signal)
        if not neuron:
            neuron = self.neurons[signal] = Neuron(signal)
            self.stats["created"] += 1
        else:
            self.stats["updated"] += 1

        energy_increment = len(signal.encode('utf-8'))

        if used_in_output:
            neuron.energy += energy_increment
        else:
            neuron.energy -= energy_increment / 2

        neuron.last_updated = now

        self.create_associations(signal)
        self.last_activation[signal] = now

        chain = self.find_strongest_chain(signal)
        if not chain:
            return signal

        result = " ".join(chain)

        dynamic_threshold = energy_increment * 50

        if neuron.energy >= dynamic_threshold:
            if not self.silent:
                # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ + –æ—Ç–≤–µ—Ç)
                print(f"{Fore.CYAN}[–ú–æ–∑–≥]{Style.RESET_ALL} {result}")
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return result
        else:
            # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Ç–≤–µ—Ç –±–µ–∑ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è)
            return result

    def find_strongest_chain(self, start_key):
        """
        –°—Ç—Ä–æ–∏—Ç —Ü–µ–ø–æ—á–∫—É –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π, —Å—É–º–º–∞—Ä–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–≤–µ–∂–µ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–æ–≤ –∏ –∏–∑–±–µ–≥–∞–µ—Ç —Ü–∏–∫–ª–æ–≤.
        """
        visited = set()
        chain = [start_key]
        current_key = start_key

        total_energy = 0
        max_energy = self.neurons.get(start_key, Neuron(start_key)).current_weight()

        while total_energy < max_energy:
            visited.add(current_key)
            next_keys = self.associations.get(current_key, {})
            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
            next_keys = {k: v for k, v in next_keys.items() if k not in visited}
            if not next_keys:
                break

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–π—Ä–æ–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º
            next_key = max(next_keys, key=lambda k: self.neurons.get(k, Neuron(k)).current_weight())
            chain.append(next_key)
            total_energy += self.neurons[next_key].current_weight()
            current_key = next_key

            if total_energy >= max_energy:
                break

        return chain

    def create_associations(self, key):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–π—Ä–æ–Ω—ã –ø–æ –≤–µ—Å—É –∏ —Å–≤–µ–∂–µ—Å—Ç–∏.
        –£—Å–∏–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑–∏ –∑–∞ —Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–≥–æ–≤.
        """
        if key not in self.associations:
            self.associations[key] = {}

        now = time.time()

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã ‚Äî —Å –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 0.1 –∏ —Å–≤–µ–∂–∏–µ
        active_neurons = [
            k for k, n in self.neurons.items()
            if n.current_weight() > 0.1 and (now - n.last_updated) <= self.recent_signals_max_age and k != key
        ]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É (—ç–Ω–µ—Ä–≥–∏–∏)
        sorted_keys = sorted(active_neurons, key=lambda k: self.neurons[k].current_weight(), reverse=True)

        source_keys = list(set([key] + [sig for sig, t in self.recent_signals]))

        for source in source_keys:
            if source not in self.associations:
                self.associations[source] = {}

            for assoc_key in sorted_keys:
                if assoc_key != source:
                    base_weight = 1
                    source_tags = self.neurons.get(source, Neuron(source)).tags
                    assoc_tags = self.neurons.get(assoc_key, Neuron(assoc_key)).tags
                    common_tags = source_tags.intersection(assoc_tags)

                    # –£—Å–∏–ª–µ–Ω–∏–µ –≤–µ—Å–∞ —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–≥–æ–≤
                    weight = base_weight + len(common_tags) * TAG_WEIGHT

                    if assoc_key in self.associations[source]:
                        self.associations[source][assoc_key] += weight
                    else:
                        self.associations[source][assoc_key] = weight

    def activate_on_gpu(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ GPU (CuPy)."""
        try:
            keys = list(self.neurons.keys())
            energies = cp.array([self.neurons[k].energy for k in keys], dtype=cp.float32)
            result = cp.sqrt(cp.abs(energies)) * cp.sign(energies)
            result = cp.asnumpy(result)
            for i, k in enumerate(keys):
                self.neurons[k].energy += result[i] * 0.01
        except Exception as e:
            print(f"[GPU ERROR] {e}")

    def is_memory_limit_exceeded(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ –∑–∞–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç."""
        try:
            total_bytes = len(pickle.dumps((self.neurons, self.associations)))
            total_mb = total_bytes / (1024 * 1024)
            return total_mb > (MEMORY_LIMIT_MB * MEMORY_THRESHOLD)
        except Exception as e:
            print(f"[MEMORY CHECK ERROR] {e}")
            return False

    def autosave_loop(self):
        """–§–æ–Ω–æ–≤–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞."""
        while True:
            time.sleep(AUTOSAVE_MEMORY)
            if self.is_memory_limit_exceeded():
                print("[WARNING] –ü–∞–º—è—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ.")
            self.save_to_db()
            self.print_diagnostics()

    def restore_memory(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–ø–∏–∏."""
        if not os.path.exists("memory_db.pkl") or os.stat("memory_db.pkl").st_size == 0:
            print("[RESTORE] –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ü—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é...")
            restored = self.backup_manager.restore_from_safe_copy()
            if restored:
                self.neurons, self.associations = restored
                print("[RESTORE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–ø–∏–∏.")
            else:
                self.neurons, self.associations = {}, {}
                print("[RESTORE] –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞–º—è—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞.")
        else:
            try:
                with open("memory_db.pkl", 'rb') as f:
                    self.neurons, self.associations = pickle.loads(f.read())
                print("[RESTORE] –ü–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
            except Exception as e:
                print(f"[RESTORE ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                self.neurons, self.associations = {}, {}

    def print_diagnostics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–π—Ä–æ–Ω–∞–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º."""
        print(f"[DIAG] –í—Å–µ–≥–æ –Ω–µ–π—Ä–æ–Ω–æ–≤: {len(self.neurons)} | –ù–æ–≤—ã–µ: {self.stats['created']} | –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.stats['updated']}")
        self.stats = {"created": 0, "updated": 0}

    def save_to_db(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª —Å –±—ç–∫–∞–ø–∞–º–∏."""
        try:
            compressed = pickle.dumps((self.neurons, self.associations))
            with open("memory_db.pkl.tmp", 'wb') as f:
                f.write(compressed)
            os.replace("memory_db.pkl.tmp", "memory_db.pkl")
            self.backup_manager.safe_save_to_backup()
            self.backup_manager.create_backup()
        except Exception as e:
            print(f"[SAVE ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        print(f"[SAVE] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–µ–π—Ä–æ–Ω–æ–≤: {len(self.neurons)}")

    def gpu_loop(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤ –Ω–∞ GPU."""
        while True:
            time.sleep(20)
            if self.gpu_mode and gpu_available:
                try:
                    keys = list(self.neurons.keys())
                    energies = cp.array([self.neurons[k].energy for k in keys], dtype=cp.float32)
                    result = cp.sqrt(cp.abs(energies)) * cp.sign(energies)
                    result = cp.asnumpy(result)
                    for i, k in enumerate(keys):
                        self.neurons[k].energy += result[i] * 0.01
                except Exception as e:
                    print(f"[GPU ERROR] {e}")
